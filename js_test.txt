1. Что такое Promise и зачем они нужны + пример
2. Конструкция async\await
3. Контекст js в классе this
4. Замыкание в js
5. Зачем нужны стрелочные функции, разница между функциями в js


1. Promise необходим для асинхронного поочерёдного исполения кода.
используя then можно указать следующий шаг функционала кода
catch выполнится в случае если при выполении была ошибка
и fnally выполняется уже в любои случае



Пример:
const prom = new Promise(function (resolve, reject) {
    const start = 'start'
    const err = 'error'
    console.log(start)
    setTimeout(() => {c
        const done = 'done'
        resolve(done)
        // reject(err)
    }, 2000)
})
prom.then(done => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(done)
        }, 2000)
    })
}).then(done => {
    console.log(done)
}).catch(err => console.error(err))
    .finally(() => console.log('final'))

2. async/await используется для асинхронных функций, когда типом ответа является promise
async указывается при объявлении функции
await указывается в месте где нужно ждать ответ, пока ответ не поступит код дальше не будет исполенен.


3. С помощью this можно выйти за область видимости для получения переменных.
В классах а именно в конструкторе класса для получения значний используется this, пример:
class Test {
    constructor(varr) {
        this.varr = varr
    }
}
т.к конструктор изолирован фигурными скобками без this получить переменную невозможно.


4. Замыкаие это когда функция возвращает функцию.
Пример:

function concat(word1) {
    return function(word2) {
        return word1 + ' ' + word2
    }
}

const first = concat('Hello')
console.log(first('World'))
console.log(first('John'))


5. Стрелочные функции сокращают написание кода в отличие от обычных функций.
Основное различие это отстутсвие ключевого слова function.
Стрелочные функции создаются уже через переменную. Также стрелочная функция не имеет собственного контекста, 
и при использовании this свой контекст не будет создан и по этой причине не получится создать объект из класса.
